import itertools
def greedy_nearest_neighbor_tsp(distance_matrix):
    """
    使用贪心最近邻法求解TSP问题
    :param distance_matrix: 距离矩阵（方阵，满足三角不等式）
    :return: 最短路径长度，路径顺序
    """
    n = len(distance_matrix)
    if n <= 1:
        return 0, [0] if n == 1 else []
    
    min_total = float('inf')
    best_path = []
    
    # 遍历所有可能的起点（可选优化：固定起点时移除外层循环）
    for start in range(n):
        visited = [False] * n
        path = [start]
        visited[start] = True
        total = 0
        
        # 逐步访问最近邻节点
        current = start
        for _ in range(n-1):
            min_dist = float('inf')
            next_city = -1
            # 寻找最近的未访问城市
            for neighbor in range(n):
                if not visited[neighbor] and distance_matrix[current][neighbor] < min_dist:
                    min_dist = distance_matrix[current][neighbor]
                    next_city = neighbor
            # 更新路径和成本
            if next_city == -1:
                break  # 无未访问城市（异常情况）
            path.append(next_city)
            visited[next_city] = True
            total += min_dist
            current = next_city
        
        # 返回起点并更新最优解
        if len(path) == n:
            total += distance_matrix[path[-1]][start]
            if total < min_total:
                min_total = total
                best_path = path + [start]
    
    return min_total, best_path

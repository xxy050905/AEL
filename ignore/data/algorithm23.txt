<start>优先选择最近且密度高的节点 <end>
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    import numpy as np
    distances = distance_matrix[current_node]
    density = np.zeros_like(distances)
    for node in unvisited_nodes:
        neighbor_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        density[node] = 1/(np.mean(neighbor_dists) + 1e-9)
    norm_dist = (distances - np.min(distances)) / (np.max(distances) - np.min(distances) + 1e-9)
    norm_density = (density - np.min(density)) / (np.max(density) - np.min(density) + 1e-9)
    scores = 0.7 * (1 - norm_dist) + 0.3 * norm_density  # 距离越近、密度越高得分越高
    best_node = unvisited_nodes[np.argmax([scores[node] for node in unvisited_nodes])]
    return best_node
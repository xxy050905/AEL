<start>动态平衡选择算法 <end>
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = -float('inf')
    best_node = unvisited_nodes[0]
    visited_ratio = 1 - len(unvisited_nodes)/len(distance_matrix)
    if visited_ratio < 0.7:
        best_score = -float('inf')
        best_node = unvisited_nodes[0]
        for node in unvisited_nodes:
            current_dist = distance_matrix[current_node][node]
            if current_dist <= 1e-10:
                current_dist = 1e-10
            future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            min_future_dist = min(future_distances) if future_distances else float('inf')
            if min_future_dist <= 1e-10:
                min_future_dist = 1e-10
            score = 0.7 * (1 / current_dist) + 0.3 * (1 / min_future_dist)
            if score > best_score:
                best_score = score
                best_node = node
    else:
        return min(unvisited_nodes,
                   key=lambda x: (distance_matrix[current_node][x] +
 0.3 * distance_matrix[x][destination_node]))
    return best_node
<start>随机最近邻算法与平衡探索与收敛算法的结合<end>
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    import random
    import numpy as np
    if random.random() < 0.1 and len(unvisited_nodes) > 1:
        return random.choice(unvisited_nodes)
    visited_ratio = 1 - len(unvisited_nodes)/len(distance_matrix)
    if visited_ratio < 0.7:
        best_score = -float('inf')
        best_node = unvisited_nodes[0]
        for node in unvisited_nodes:
            valid_neighbors = sum(1 for n in unvisited_nodes
                                 if n != node and distance_matrix[node][n] < distance_matrix[current_node][node])
            current_dist = distance_matrix[current_node][node]
            score = valid_neighbors * 100 + (1 / current_dist if current_dist != 0 else float('inf'))
            if score > best_score or (score == best_score and distance_matrix[node][destination_node] < distance_matrix[best_node][destination_node]):
                best_score = score
                best_node = node
        return best_node
    else:
        return min(unvisited_nodes,
                   key=lambda x: (distance_matrix[current_node][x] +
                       0.3 * distance_matrix[x][destination_node]))
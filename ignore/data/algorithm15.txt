<start>基于密度优先和路径感知的混合算法<end>
import numpy as np
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if len(unvisited_nodes) == 1:
        return unvisited_nodes[0]
    min_cost = float('inf')
    best_node = unvisited_nodes[0]
    for node in unvisited_nodes:
        forward_cost = distance_matrix[current_node][node]
        return_cost = distance_matrix[node][destination_node]
        remaining_cost = min(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        total = forward_cost + 0.4*return_cost + 0.6*remaining_cost
        if total < min_cost:
            min_cost = total
            best_node = node
    return best_node